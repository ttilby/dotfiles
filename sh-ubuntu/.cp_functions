# functions specifically for Cradlepoint

# Allow entry into local postgres without specifying host
export PGHOST=localhost

# logs into docker registry at AWS
# only works with aws v1
# ecrlogin() {
#     export $(awsudo cp-ecr)
#     $(aws ecr get-login --registry-ids 737819302384  --no-include-email --region us-west-2)
# }

# works with aws cli v2
ecrlogin() {
    # Need to call 'assume sso-cp-ecr' before using this function
    # assume sso-cp-ecr
    aws ecr get-login-password | docker login -u AWS --password-stdin 737819302384.dkr.ecr.us-west-2.amazonaws.com
}

# Allows for use of the cp-teleport-.*.sh scripts on a headless system
export TELEPORT_LOGIN_BIND_ADDR=127.0.0.1:38607

# This is no longer needed when using the cp-teleport-*.sh scripts
tshlogin() {
    tsh login --proxy=teleport.utility-prod.cradlepointecm.com:443 --bind-addr=127.0.0.1:38607
}

ca() {
    ecrlogin
    export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain cradlepoint --region us-west-2 --domain-owner 737819302384 --query authorizationToken --output text`
    export PIP_INDEX_URL=https://aws:${CODEARTIFACT_AUTH_TOKEN}@cradlepoint-737819302384.d.codeartifact.us-west-2.amazonaws.com/pypi/cp-pypi-cache/simple/
    echo "Logged in to Codeartifact"
}

offline-db() {
    awsume offline-db-session-manager-prod
    aws ssm start-session --target "$(aws ec2 describe-instances --filters Name=tag:Name,Values=offline-db-prod Name=instance-state-name,Values=running --query 'Reservations[0].Instances[0].InstanceId' --output text)" --document-name offline-db-session-manager-prod
}

offline-db-f() {
    awsume offline-db-session-manager-prod
    aws ssm start-session --target "$(aws ec2 describe-instances --filters Name=tag:Name,Values=offline-db-prod Name=instance-state-name,Values=running --query 'Reservations[0].Instances[0].InstanceId' --output text)" --document-name port-forwarding-offline-db-session-manager-prod --parameters '{"portNumber":["22"],"localPortNumber":["2222"]}'
}
